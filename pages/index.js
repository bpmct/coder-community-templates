import Head from "next/head";
import Image from "next/image";

import Box from "@mui/material/Box";
import Card from "@mui/material/Card";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid";

import { useState } from "react";

import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select, { SelectChangeEvent } from "@mui/material/Select";

import Link from "next/link";

import { Link as MaterialLink } from "@mui/material";

import Avatar from "@mui/material/Avatar";
import Chip from "@mui/material/Chip";
import Stack from "@mui/material/Stack";

import CardActions from "@mui/material/CardActions";
import CardContent from "@mui/material/CardContent";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import Modal from "@mui/material/Modal";
import { getCommunityTemplates } from "../utils";
import { COOKIE_NAME_PRERENDER_BYPASS } from "next/dist/server/api-utils";

export async function getStaticProps(context) {
  const templates = await getCommunityTemplates();

  // get unique list of providers used
  let providers = [];
  for (const template of templates) {
    providers = providers.concat(
      template.providers.filter((i) => !providers.includes(i))
    );
  }

  return {
    props: {
      templates,
      providers,
    },
    revalidate: 300,
  };
}

export default function Home({ templates, providers }) {
  const [typeFilter, setTypeFilter] = useState("all");
  const [narrowProvider, setNarrowProvider] = useState("");

  const toggleNarrowProvider = (p) => {
    if (narrowProvider == p) {
      setNarrowProvider("");
    } else {
      setNarrowProvider(p);
    }
  };

  const filteredTemplates = templates.filter((template) => {
    if (typeFilter != "all" && template.type != typeFilter) return false;
    if (narrowProvider != "" && !template.providers.includes(narrowProvider))
      return false;
    else return true;
  });

  return (
    <div>
      <Head>
        <title>Coder Community Templates</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxWidth="lg">
        <h1>Coder Templates</h1>

        <p>
          Generated from{" "}
          <a
            href="https://github.com/coder/coder/blob/main/examples/templates/community-templates.md"
            target="_blank"
            rel="noreferrer"
          >
            <code>community-templates.md</code>
          </a>
        </p>

        <Grid
          container
          spacing={2}
          columns={{ xs: 4, md: 12 }}
          alignItems="stretch"
          alignContent="stretch"
        >
          <Grid item md={3} xs={4}>
            <FormControl fullWidth>
              <InputLabel id="demo-simple-select-label">Type</InputLabel>
              <Select
                labelId="demo-simple-select-label"
                id="demo-simple-select"
                value={typeFilter}
                label="Type"
                defaultValue="all"
                onChange={(event) => {
                  setTypeFilter(event.target.value);
                }}
              >
                <MenuItem value="all">All</MenuItem>
                <MenuItem value="official">Official</MenuItem>
                <MenuItem value="community">Community</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item md={9}>
            {providers.map((p, i) => {
              let selected = narrowProvider == "";
              if (narrowProvider == p) selected = true;

              return (
                <Chip
                  key={`provider-${i}`}
                  style={{ margin: "4px" }}
                  label={p}
                  color={selected ? "primary" : "default"}
                  onClick={() => toggleNarrowProvider(p)}
                />
              );
            })}
          </Grid>
          {filteredTemplates &&
            filteredTemplates.map((template) => {
              return (
                <Grid item xs={2} md={4} key={template.path}>
                  <Card
                    variant="outlined"
                    style={{
                      height: "100%",
                      display: "flex",
                      flexDirection: "column",
                    }}
                  >
                    <CardContent>
                      <Stack direction="row" spacing={1}>
                        <Chip
                          avatar={
                            <Avatar
                              alt={template.publisherDetails.name}
                              src={template.publisherDetails.avatar}
                            />
                          }
                          label={template.publisherDetails.name}
                        />
                      </Stack>
                      <Typography variant="h5" component="div">
                        {template.slug}
                      </Typography>
                      <Typography sx={{ mb: 1.5 }} color="text.secondary">
                        {template.type == "community"
                          ? "Community template"
                          : "Official template"}
                      </Typography>
                      <Typography variant="body2">
                        {template.description}
                      </Typography>
                    </CardContent>
                    <CardActions style={{ marginTop: "auto" }}>
                      <Link
                        href={`/templates/${template.publisherDetails.name}/${template.slug}`}
                      >
                        <Button size="small">Use template</Button>
                      </Link>
                      <Button
                        href={template.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        size="small"
                      >
                        GitHub
                      </Button>
                    </CardActions>
                  </Card>
                </Grid>
              );
            })}
        </Grid>
        <footer style={{ marginTop: 30 }}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span>
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </footer>
      </Container>
    </div>
  );
}
